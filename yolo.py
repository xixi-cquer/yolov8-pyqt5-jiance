# -*- coding: utf-8 -*-
import qtpy
# Form implementation generated from reading ui file 'UI\yolo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import torch
import torchvision
import cv2
import numpy as np
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from ultralytics import YOLO

from threading import *

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 311, 281))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(400, 30, 311, 281))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(690, 310, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(690, 360, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(690, 410, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(690, 460, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(20, 300, 641, 241))
        self.textBrowser.setObjectName("textBrowser")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(640, 30, 62, 22))
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(640, 130, 62, 22))
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(690, 510, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 点击响应函数
        self.pushButton.clicked.connect(self.uploadImage)
        self.pushButton_2.clicked.connect(self.uploadMP)
        self.pushButton_3.clicked.connect(self.uploadCamera)
        self.pushButton_4.clicked.connect(self.select)
        self.pushButton_5.clicked.connect(self.stop)
        self.doubleSpinBox.valueChanged.connect(self.confchange)

        self.model=YOLO('../yolov8s.pt')
        self.conf = 0.7
        self.cap=cv2.VideoCapture(0,cv2.CAP_DSHOW)
        self.cap.release()
        self.timerca = QTimer()
        self.timerca.timeout.connect(self.showCamera)
        self.timermp = QTimer()
        self.timermp.timeout.connect(self.showvideo)


    def confchange(self,val):
        self.conf = self.doubleSpinBox.value()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton.setText(_translate("MainWindow", "检测图片"))
        self.pushButton_2.setText(_translate("MainWindow", "检测视频"))
        self.pushButton_3.setText(_translate("MainWindow", "检测摄像头"))
        self.pushButton_4.setText(_translate("MainWindow", "选择模型"))
        self.pushButton_5.setText(_translate("MainWindow", "停止检测"))

    def uploadImage(self):
        file_dialog = QFileDialog()
        image_path, _ = file_dialog.getOpenFileName(self, '选择图片', '', 'Images (*.png *.xpm *.jpg *.bmp)')
        self.image_path = image_path
        if image_path:
            # 在这里添加加载图片的逻辑，例如显示图片到label2
            pixmap = QtGui.QPixmap(image_path)
            self.label.setPixmap(pixmap)
            self.label.setScaledContents(True)

            results = self.model.predict(self.image_path)
            annotated_frame = results[0].plot()
            annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
            # 将图像数据转换为QImage格式
            height, width, channel = annotated_frame.shape
            bytes_per_line = 3 * width
            qimage = QtGui.QImage(annotated_frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
            # 将QImage转换为QPixmap
            pixmap = QtGui.QPixmap.fromImage(qimage)
            # 都执行：
            self.label_2.setPixmap(pixmap)
            self.label_2.setScaledContents(True)



    def uploadMP(self):
        self.leixing = 2
        videoPath, _ = QFileDialog.getOpenFileName(
            self,  # 父窗口对象
            "选择视频文件",  # 标题
            ".",  # 起始目录
            "图片类型 (*.mp4 *.avi)"  # 选择类型过滤项，过滤内容在括号中
        )
        self.image_path = videoPath
        # 参数0代表系统第一个摄像头,第二就用1 以此类推
        self.cap = cv2.VideoCapture(self.image_path)
        # 设置显示分辨率和FPS ,不设置的话会非常卡
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 800)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 600)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        self.timermp.start(30)

    def showvideo(self):
        ret, frame = self.cap.read()
        results=self.model(source=frame,conf=self.conf)
        caframe=results[0].plot()

        # 视频流置于label中间部分播放
        # 视频色彩转换回RGB，OpenCV images as BGR
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        qImage = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0],QtGui.QImage.Format_RGB888)  # 变成QImage形式
        # 往显示视频的Label里 显示QImage
        self.label.setPixmap(QtGui.QPixmap.fromImage(qImage))
        self.label.setScaledContents(True)

        caframe = cv2.cvtColor(caframe, cv2.COLOR_BGR2RGB)
        caImage = QtGui.QImage(caframe.data, caframe.shape[1], caframe.shape[0], QtGui.QImage.Format_RGB888)  # 变成QImage形式
        # 往显示视频的Label里 显示QImage
        self.label_2.setPixmap(QtGui.QPixmap.fromImage(caImage))
        self.label_2.setScaledContents(True)

    def uploadCamera(self):
        # 参数0代表系统第一个摄像头,第二就用1 以此类推
        self.cap = cv2.VideoCapture(0,cv2.CAP_DSHOW)
        # 设置显示分辨率和FPS ,不设置的话会非常卡
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 800)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 600)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        self.timerca.start(30)



    def showCamera(self):

        ret, frame = self.cap.read()
        self.image_path = frame
        results=self.model(self.image_path)
        caframe=results[0].plot()

        # 视频流置于label中间部分播放
        # 视频色彩转换回RGB，OpenCV images as BGR
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        qImage = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0],QtGui.QImage.Format_RGB888)  # 变成QImage形式
        # 往显示视频的Label里 显示QImage
        self.label.setPixmap(QtGui.QPixmap.fromImage(qImage))
        self.label.setScaledContents(True)

        caframe = cv2.cvtColor(caframe, cv2.COLOR_BGR2RGB)
        caImage = QtGui.QImage(caframe.data, caframe.shape[1], caframe.shape[0], QtGui.QImage.Format_RGB888)  # 变成QImage形式
        # 往显示视频的Label里 显示QImage
        self.label_2.setPixmap(QtGui.QPixmap.fromImage(caImage))
        self.label_2.setScaledContents(True)

    def select(self):
        file_dialog = QFileDialog()
        path, _ = file_dialog.getOpenFileName(self, '选择模型', '', 'model(*.pt)')
        self.model=YOLO(path)
    def stop(self):
        self.cap.release()
        self.timerca.stop()
        self.timermp.stop()
        self.label.clear()
        self.label_2.clear()

app = QApplication(sys.argv)
main1=QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(main1)
main1.show()
sys.exit(app.exec_())